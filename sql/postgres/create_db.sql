--DROP DATABASE IF EXISTS provider;
--CREATE DATABASE provider;
--COMMENT ON DATABASE provider IS 'Java internet provider project database';

\c provider;

BEGIN;

--------------------- translation schema --------------------------------------

DROP SCHEMA IF EXISTS translation CASCADE;
CREATE SCHEMA translation;

DROP TABLE IF EXISTS translation.languages CASCADE;
CREATE TABLE translation.languages(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    short_name TEXT UNIQUE NOT NULL
);

DROP TABLE IF EXISTS translation.text_content CASCADE;
CREATE TABLE translation.text_content(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    original_language_id INT NOT NULL,
    original_text TEXT NOT NULL
        CONSTRAINT valid_original_text CHECK(original_text ~* '^[[:alpha:]\d,.!?;"-_()/]+$'),
    FOREIGN KEY(original_language_id) REFERENCES translation.languages(id)
);

DROP TABLE IF EXISTS translation.translations CASCADE;
CREATE TABLE translation.translations(
    text_content_id BIGINT NOT NULL,
    language_id INT NOT NULL,
    content TEXT NOT NULL
        CONSTRAINT valid_translation_content CHECK(content ~* '^[[:alpha:]\d,.!?;"-_()/]+$'),
    CONSTRAINT unique_language_content UNIQUE(text_content_id, language_id),
    FOREIGN KEY(text_content_id) REFERENCES translation.text_content(id)
        ON DELETE CASCADE,
    FOREIGN KEY(language_id) REFERENCES translation.languages(id)
);

------------------------------ main schema(public) --------------------------------------------

-- TODO: find a way to keep name regex in one place(it's also used in surname, city, street constraints)

DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login TEXT NOT NULL
        CONSTRAINT valid_login CHECK(login ~* '^[a-zA-Z\d_]{4,}$'),
    role TEXT NOT NULL
        CONSTRAINT not_empty_role CHECK(length(role) > 0),
    name TEXT NOT NULL
        CONSTRAINT valid_name CHECK(name ~* '^[[:alpha:]\d]+$'),
    surname TEXT NOT NULL
        CONSTRAINT valid_surname CHECK(surname ~* '^[[:alpha:]\d]+$'),
    phone TEXT NOT NULL
        CONSTRAINT valid_phone CHECK(phone ~* '^\+?([1-9][0-9])?[0-9]{6,10}$')
);

DROP TABLE IF EXISTS user_passwords;
CREATE TABLE user_passwords(
    user_id BIGINT NOT NULL,
    hash TEXT NOT NULL,           -- Hashed password with salt
    salt TEXT NOT NULL,           -- Salt used with this password
    hash_method TEXT NOT NULL,    -- Hash method identified
    FOREIGN KEY(user_id) REFERENCES users(id)
        ON DELETE CASCADE
);

-- TODO: delete user_registration_info table
DROP TABLE IF EXISTS user_registration_info CASCADE;
CREATE TABLE user_registration_info(
    user_id BIGINT NOT NULL,
    registration_time TIMESTAMPTZ NOT NULL DEFAULT current_timestamp,
    admin_id BIGINT,       -- who registered the user
    FOREIGN KEY(user_id) REFERENCES users(id)
        ON DELETE CASCADE,
    FOREIGN KEY(admin_id) REFERENCES users(id)
        ON DELETE SET NULL
);

DROP TABLE IF EXISTS cities CASCADE;
CREATE TABLE cities(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_text_content_id BIGINT UNIQUE NOT NULL,
    FOREIGN KEY(name_text_content_id) REFERENCES translation.text_content(id)
);

DROP TABLE IF EXISTS city_streets CASCADE;
CREATE TABLE city_streets(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    city_id INT NOT NULL,
    name_text_content_id BIGINT UNIQUE NOT NULL,    -- street name
    CONSTRAINT unique_city_street UNIQUE(city_id, name_text_content_id),
    FOREIGN KEY(city_id) REFERENCES cities(id)
        ON DELETE CASCADE,
    FOREIGN KEY(name_text_content_id) REFERENCES translation.text_content(id)
);

DROP TABLE IF EXISTS user_addresses CASCADE;
CREATE TABLE user_addresses(
    user_id BIGINT NOT NULL,
    city_street_id INT NOT NULL,
    building INT NOT NULL
        CONSTRAINT positive_building CHECK(building > 0),
    apartment INT
        CONSTRAINT positive_apartment CHECK(apartment > 0),
    FOREIGN KEY(user_id) REFERENCES users(id)
        ON DELETE CASCADE,
    FOREIGN KEY(city_street_id) REFERENCES city_streets(id)
);

DROP TABLE IF EXISTS user_accounts CASCADE;
CREATE TABLE user_accounts(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    currency TEXT NOT NULL
        CONSTRAINT not_empty_currency CHECK(length(currency) > 0),
    amount NUMERIC(12, 2) DEFAULT 0 NOT NULL
        CONSTRAINT positive_amount CHECK(amount >= 0),
    CONSTRAINT unique_user_id_currency UNIQUE(user_id, currency),
    FOREIGN KEY(user_id) REFERENCES users(id)
);

DROP TABLE IF EXISTS user_account_transactions CASCADE;
CREATE TABLE user_account_transactions(
    user_account_id BIGINT NOT NULL,
    value NUMERIC(12, 2) NOT NULL
        CONSTRAINT non_zero_value CHECK(value != 0),
    comment TEXT NOT NULL
        CONSTRAINT valid_comment CHECK(comment ~* '^[[:alpha:]\d,.!?;"-_()/]+$'),
    transaction_time TIMESTAMPTZ NOT NULL DEFAULT current_timestamp,
    FOREIGN KEY(user_account_id) REFERENCES user_accounts(id)
        ON DELETE CASCADE         -- It could be restricted, but the app won't support account removal anyway.
);

-- Keeps user current status and status history
DROP TABLE IF EXISTS user_statuses CASCADE;
CREATE TABLE user_statuses(
    user_id BIGINT NOT NULL,
    status TEXT NOT NULL
        CONSTRAINT not_empty_status CHECK(length(STATUS) > 0),
    set_time TIMESTAMPTZ NOT NULL DEFAULT current_timestamp,
    comment TEXT NOT NULL
        CONSTRAINT valid_comment CHECK(comment ~* '^[[:alpha:]\d,.!?;"-_()/]+$'),
    FOREIGN KEY(user_id) REFERENCES users(id)
        ON DELETE CASCADE
);

-- Services are offered by tariff_plan
-- Service example:
--      mobile internet with characteristics: speed - 100Mb/s, limit - 20GB
DROP TABLE IF EXISTS services CASCADE;
CREATE TABLE services(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_text_content_id BIGINT UNIQUE NOT NULL,
    FOREIGN KEY(name_text_content_id) REFERENCES translation.text_content(id) -- name TEXT UNIQUE NOT NULL
);

-- key-value pairs describing concrete service characteristics
DROP TABLE IF EXISTS service_characteristics CASCADE;
CREATE TABLE service_characteristics(
    service_id INT NOT NULL,
    name_text_content_id BIGINT UNIQUE NOT NULL,        -- name
    value_text_content_id BIGINT UNIQUE NOT NULL,       -- value
    FOREIGN KEY(service_id) REFERENCES services(id)
        ON DELETE CASCADE,
    FOREIGN KEY(name_text_content_id) REFERENCES translation.text_content(id),
    FOREIGN KEY(value_text_content_id) REFERENCES translation.text_content(id)
);

DROP TABLE IF EXISTS possible_tariff_plan_statuses CASCADE;
CREATE TABLE possible_tariff_plan_statuses(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL
        CONSTRAINT valid_status_name CHECK(name ~* '^[[:alpha:]]+$')
);

DROP TABLE IF EXISTS tariff_plan_status_flow;
CREATE TABLE tariff_plan_status_flow(
    from_status_id INT NOT NULL,
    to_status_id INT NOT NULL,
    FOREIGN KEY(from_status_id) REFERENCES possible_tariff_plan_statuses(id)
        ON DELETE CASCADE,
    FOREIGN KEY(to_status_id) REFERENCES possible_tariff_plan_statuses(id)
        ON DELETE CASCADE
);

DROP TABLE IF EXISTS tariff_plans CASCADE;
CREATE TABLE tariff_plans(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title_text_content_id BIGINT UNIQUE NOT NULL,           -- title
    description_text_content_id BIGINT UNIQUE NOT NULL,     -- description
    status_id INT NOT NULL,
    FOREIGN KEY(title_text_content_id) REFERENCES translation.text_content(id),
    FOREIGN KEY(description_text_content_id) REFERENCES translation.text_content(id),
    FOREIGN KEY(status_id) REFERENCES possible_tariff_plan_statuses(id)
);

-- Months and minutes only, for example
DROP TABLE IF EXISTS tariff_plan_duration;
CREATE TABLE tariff_plan_duration(
    tariff_plan_id INT NOT NULL,
    months INT NOT NULL DEFAULT 0
        CONSTRAINT positive_duration_months CHECK(months >= 0),
    minutes BIGINT NOT NULL DEFAULT 0
        CONSTRAINT positive_duration_minutes CHECK(minutes >= 0),
    FOREIGN KEY(tariff_plan_id) REFERENCES tariff_plans(id)
        ON DELETE CASCADE
);

DROP TABLE IF EXISTS tariff_plan_versions CASCADE;
CREATE TABLE tariff_plan_versions(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tariff_plan_id INT NOT NULL,
    usd_price NUMERIC(12, 2) NOT NULL
        CONSTRAINT positive_usd_price CHECK(usd_price >= 0),
    FOREIGN KEY(tariff_plan_id) references tariff_plans(id)
        ON DELETE CASCADE
);

DROP TABLE IF EXISTS tariff_plan_versions_services CASCADE;
CREATE TABLE tariff_plan_versions_services(
    tariff_plan_version_id INT NOT NULL,
    service_id INT NOT NULL,
        -- It's unnamed, cause when rerunning the script I got 'constraint already exists' error otherwise
    -- CONSTRAINT unique_tariff_version_service
    UNIQUE(tariff_plan_version_id, service_id),
    FOREIGN KEY(tariff_plan_version_id) REFERENCES tariff_plan_versions(id)
        ON DELETE CASCADE,
    FOREIGN KEY(service_id) REFERENCES services(id)
        ON DELETE CASCADE
);

DROP TABLE IF EXISTS users_tariff_plans;
CREATE TABLE users_tariff_plans(
    user_account_id BIGINT NOT NULL,
    tariff_plan_version_id INT NOT NULL,
    subscribed_at TIMESTAMPTZ NOT NULL DEFAULT current_timestamp,
    FOREIGN KEY(user_account_id) REFERENCES user_accounts(id)
        ON DELETE CASCADE,
    FOREIGN KEY(tariff_plan_version_id) REFERENCES tariff_plan_versions(id)
);

------------------------- Default insertions --------------------------

---------------- Tariff plan statuses
INSERT INTO possible_tariff_plan_statuses(name)
values
    ('active'),
    ('hidden');

END;