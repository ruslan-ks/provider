package com.provider.entity.user;

import com.provider.entity.Entity;
import com.provider.entity.user.hashing.PasswordHashing;
import org.jetbrains.annotations.NotNull;

public interface UserPassword extends Entity {
    /**
     * Returns user id
     * @return user id, 0 if was not set
     */
    long getUserId();

    /**
     * Sets user id
     * @param userId user id to be set
     * @throws IllegalArgumentException if userId <= 0
     */
    void setUserId(long userId);

    /**
     * Returns hashed user password
     * @return hashed password
     */
    @NotNull String getHash();

    /**
     * Returns salt used to produce password hash
     * @return salt used to produce password hash(can be obtained by getData() method call)
     */
    @NotNull String getSalt();

    /**
     * @return hash method used to generate password hash.
     */
    @NotNull PasswordHashing.HashMethod getHashMethod();

    /**
     * Convenience method for password hashing.
     * Used to generate hashed password when checking password correctness.
     * Uses HashMethod.PBKDF2_1 hashing algorithm
     * @param password user entered password
     * @param salt previously generated by hash(String password) method salt
     * @return UserPassword object containing hashed password and specified salt
     */
    static @NotNull UserPassword hash(@NotNull String password, @NotNull String salt) {
        final PasswordHashing hasher = PasswordHashing.getInstance(PasswordHashing.HashMethod.PBKDF2_1);
        return hasher.hash(password, salt);
    }

    /**
     * Convenience method for password hashing.
     * Should be used when registering a user and hashing his password for the first time.
     * Uses HashMethod.PBKDF2_1 hashing algorithm
     * @param password user entered password
     * @return UserPassword object containing hashed password and randomly generated salt
     */
    static @NotNull UserPassword hash(@NotNull String password) {
        final PasswordHashing hasher = PasswordHashing.getInstance(PasswordHashing.HashMethod.PBKDF2_1);
        return hasher.hash(password);
    }
}
